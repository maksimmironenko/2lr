import json
import yaml
import uuid

# Класс для хранения данных о клиенте
class Client:
    def __init__(self, last_name, first_name, middle_name, address, phone):
        self.client_id = str(uuid.uuid4())  # Генерация уникального ID клиента
        self.last_name = last_name
        self.first_name = first_name
        self.middle_name = middle_name
        self.address = address
        self.phone = phone

    def to_dict(self):
        """Преобразовать объект в словарь для сохранения в файл."""
        return {
            "client_id": self.client_id,
            "last_name": self.last_name,
            "first_name": self.first_name,
            "middle_name": self.middle_name,
            "address": self.address,
            "phone": self.phone
        }

    @classmethod
    def from_dict(cls, data):
        """Создание объекта клиента из словаря."""
        return cls(data['last_name'], data['first_name'], data['middle_name'], data['address'], data['phone'])

# Базовый класс для репозитория клиентов
class ClientRepository:
    def __init__(self, filename):
        self.filename = filename
        self.clients = []
        self.load_data()

    def load_data(self):
        """Загрузить данные из файла. Этот метод должен быть реализован в подклассах."""
        raise NotImplementedError

    def save_data(self):
        """Сохранить данные в файл. Этот метод должен быть реализован в подклассах."""
        raise NotImplementedError

    def add_client(self, last_name, first_name, middle_name, address, phone):
        """Добавить нового клиента."""
        new_client = Client(last_name, first_name, middle_name, address, phone)
        self.clients.append(new_client)
        self.save_data()

    def get_by_id(self, client_id):
        """Найти клиента по ID."""
        for client in self.clients:
            if client.client_id == client_id:
                return client
        return None

    def delete_by_id(self, client_id):
        """Удалить клиента по ID."""
        self.clients = [client for client in self.clients if client.client_id != client_id]
        self.save_data()

    def get_count(self):
        """Получить количество клиентов."""
        return len(self.clients)

    def __str__(self):
        """Вывести информацию о всех клиентах."""
        return "\n".join([str(client.to_dict()) for client in self.clients])

# Репозиторий для работы с JSON
class ClientRepJson(ClientRepository):
    def load_data(self):
        """Загрузить данные из JSON-файла."""
        try:
            with open(self.filename, 'r', encoding='utf-8') as file:
                data = json.load(file)
                self.clients = [Client.from_dict(item) for item in data]
        except FileNotFoundError:
            self.clients = []

    def save_data(self):
        """Сохранить данные в JSON-файл."""
        with open(self.filename, 'w', encoding='utf-8') as file:
            json.dump([client.to_dict() for client in self.clients], file, indent=4)

# Репозиторий для работы с YAML
class ClientRepYaml(ClientRepository):
    def load_data(self):
        """Загрузить данные из YAML-файла."""
        try:
            with open(self.filename, 'r', encoding='utf-8') as file:
                data = yaml.safe_load(file) or []
                self.clients = [Client.from_dict(item) for item in data]
        except FileNotFoundError:
            self.clients = []

    def save_data(self):
        """Сохранить данные в YAML-файл."""
        with open(self.filename, 'w', encoding='utf-8') as file:
            yaml.safe_dump([client.to_dict() for client in self.clients], file, allow_unicode=True)
